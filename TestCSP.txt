/* -------------------------------------
Simon-Philipp Merz September 2018
See "On the (non) obfuscating powers of WalnutDSA" by Simon-Philipp Merz and Christophe Petit

This file allows to test our approach described in the paper above to solve the CSP on randomly generated CSP instances of words of a given length.
---------------------------------------*/

/* Test parameters */
//Number of instances we test our attack for the parameters above
Trials := 100;

//Length of C and X, where Y= C X C^{-1} in Artin generators
lengthC := 1000;
lengthX := 1000;

/* Test 
Randomly generate "Trials" CSP instances and try to solve them. Then, check whether our 
solution is correct.*/

b := 0;
c := 0;

for i in [1..Trials] do

// Randomly generate two braids C and X of lengthC and lengthX
// and l2 in Artin generators, resp.
	C := Random(B, lengthC, lengthC: Presentation := "Artin"); 
	X := Random(B, lengthX, lengthX: Presentation := "Artin");

X, Y := generate_CSI(X, C);

// Solve CSP

Cprime := CSPsolution(X, Y);

// Verify the solution

if verify_CSP(X, Y, Cprime) eq 1 then
	print("Solution found!");
	b := b+1;
else
	print("No valid solution found.");
	c:= c+1;
end if;

end for;

print("Number of successful solutions:");
print(b);
print("Number of unsuccessful runs:");
print(c);

	

